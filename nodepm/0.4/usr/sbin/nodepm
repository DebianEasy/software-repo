#!/usr/bin/env bash
PathLid=/proc/acpi/button/lid/*/state
PathEtc=/etc/nodepm
PathRun=/run/nodepm
Bat_Function=${Bat_Function:-batmonitor_sys}
RereshTime=${RefreshTime:-2}
Config_Mode=${Config_Mode:-"Double"}
Gpu_Backlight=${Gpu_Backlight:-"all"}
Backlight_Unit=${Backlight_Unit:-0.075}
Backlight_Idle=${Backlight_Idle:-0.25}
Inhibit_List=${Inhibit_List:-"default"}
DEBUG_MODE=${DEBUG_MODE:-0}
Debug_Mode=${Debug_Mode:-$DEBUG_MODE}
Multirun_Mode=${Multirun_Mode:-0}
Wake_Fifo=${Wake_Fifo:-'on'}
Version=0.4.4

BatteryDaemon=${BatteryDaemon:-on}
LidDaemon=${LidDaemon:-on}
TimerDaemon=${TimerDaemon:-on}
BacklightDaemon=${BacklightDaemon:-on}

ProgramName=$0

PATH=$PATH:`dirname ${BASH_SOURCE[0]}`

function getlight_max(){
    cat $GpuPath/max_brightness
}

function getlight(){
    cat $GpuPath/brightness
}

function getlight_relative(){
    tem1=`getlight`
    tem2=`getlight_max`
    tem=`echo "$tem1/$tem2"|bc -l` 
    echo $tem
    unset tem1
    unset tem2
    unset tem
}

#change backlight value
function setlight(){
    tem=$1
    tem0=`getlight_max`
    if [ $tem -gt $tem0 ]
    then
        tem=$tem0
    elif [ $tem -lt 0 ]
    then
        tem=0
    fi
    #echo test $tem
    echo $tem  > $GpuPath/brightness
    unset tem
    unset tem0
}

#change backlight relatively
function setlight_relative(){
    tem0=`getlight_max`
    tem=`echo "scale=0;$1*$tem0/1"|bc`
    setlight $tem
}

function batmonitor_sys(){
	unset BAT_TIME
	AC_STAT=Offline
	BAT_STAT=Discharging
	for Line in `ls -d /sys/class/power_supply/AC*`
	do
		[ `cat "$Line"/online` -eq 1 ] && AC_STAT=Online
	done
	for Line in `ls -d /sys/class/power_supply/BAT*`
	do
		[ -e "$Line"/capacity ] && BAT_CAP=`cat "$Line"/capacity`
		[ -e "$Line"/status ] && BAT_STAT=`cat "$Line"/status`
	done
	unset Line
	Ac_Status=$AC_STAT
	Battery_Status=$BAT_STAT
	Battery_Capacity=$BAT_CAP
}

function batmonitor_acpi(){
	BAT_LINE=`acpi -b`
	BAT_TEM=${BAT_LINE%'%'*}
	BAT_CAP=${BAT_TEM##*' '}
	BAT_TEM=${BAT_LINE##*','}
	BAT_TIME=${BAT_TEM:0:9}
	BAT_STAT=Discharging
	echo $BAT_LINE | grep Charging && BAT_STAT=Charging
	echo $BAT_LINE | grep Full && BAT_STAT=Full
	acpi -a | grep on && AC_STAT=Online
	acpi -a | grep off && AC_STAT=Offline
	unset BAT_LINE
	unset BAT_TEM
	Ac_Status=$AC_STAT
	Battery_Status=$BAT_STAT
	Battery_Capacity=$BAT_CAP
	Battery_Time=$BAT_TIME
}

function batmonitor_other(){
	unset BAT_TIME
	unset BAT_CAP
	unset AC_STAT
	unset BAT_STAT
	source $1
}

function INTERNAL_backlight_up(){
	temLight=`getlight_relative`
    AveLight=`echo "$temLight + $Backlight_Unit"|bc -l`
    backlight_daemon_set_avelight
    unset temLight
}

function INTERNAL_backlight_down(){
	temLight=`getlight_relative`
    AveLight=`echo "$temLight - $Backlight_Unit"|bc -l`
    backlight_daemon_set_avelight
    unset temLight
}

function INTERNAL_backlight_save(){
	backlight_daemon_get_avelight
	#echo $AveLight
	#temLight=`bc -l <<< $Backlight_Idle+0.02`
	temflag=`bc -l<<<"$AveLight>=0.02"`
	if [ $temflag -eq 1 ]
	then
		Backlight_Saved=$AveLight
		[ -f $PathRun/backlight_saved ] && echo $Backlight_Saved > $PathRun/backlight_saved
	fi
	Backlight_SaveFlag=1
	unset temflag
	unset temLight
}

function INTERNAL_backlight_delete(){
	unset Backlight_Saved
	echo > $PathRun/backlight_saved
}

function INTERNAL_backlight_idle(){
	INTERNAL_backlight_save
	temLight=$1
	temLight=${temLight:-$Backlight_Idle}
	temflag=`bc -l<<<"$temLight<=$Backlight_Idle"`
	if [ $temflag -eq 1 ]
	then
		temLight=$Backlight_Idle
	fi
	backlight_daemon_get_avelight
	temflag=`bc -l<<<"$temLight<=$AveLight"`
	if [ $temflag -eq 1 ]
	then
		#[ -f $PathRun/timer_flag ] && echo 1 > $PathRun/timer_flag
		AveLight=$temLight
    	backlight_daemon_set_avelight quiet
    else
    	INTERNAL_backlight_delete
	fi
    unset temLight
    unset temflag
}

function INTERNAL_backlight_off(){
	[ -z $Backlight_Saved ] && INTERNAL_backlight_save
	AveLight=0
	#[ -f $PathRun/timer_flag ] && echo 1 > $PathRun/timer_flag
	backlight_daemon_set_avelight quiet
	unset temflag
}

function INTERNAL_backlight_wake(){
	backlight_daemon_get_avelight
	temLight=${Backlight_Saved:-$Backlight_Idle}
	temflag=`bc -l<<<"$AveLight>0.02"`
	if [ $temflag -eq 1 ]
	then
		temflag=`bc -l<<<"$AveLight<$temLight"`
		if [ $temflag -eq 1 ]
		then
			AveLight=$temLight
			backlight_daemon_set_avelight quiet
			Backlight_SaveFlag=0
			INTERNAL_backlight_delete
		fi
	else
		temflag=`bc -l<<<"$Backlight_Idle>$temLight"`
		if [ $temflag -eq 1 ]
		then
			AveLight=$Backlight_Idle
		else
			AveLight=$temLight
		fi
		backlight_daemon_set_avelight quiet
		Backlight_SaveFlag=0
		INTERNAL_backlight_delete
	fi
	unset temflag
	unset temLight
}

function INTERNAL_user_run(){
	for dir in `ls /run/user/* -d`
	do
		uid=${dir##*'/'}
		user=$(id -nu $uid)
		if ( which systemctl >/dev/null )
		then
			env_user=''
			for env_tmp in $(sudo -i -u $user XDG_RUNTIME_DIR=$dir DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$uid/bus systemctl --user show-environment)
			do
				env_user="$env_user""$env_tmp"' '
			done
			sudo -i -u $user $env_user "$@" &
		else
			display=$(LC_ALL=C who -a|grep -wF $user|head -n 1|grep  '('|awk -F '(' '{print $2}'|awk -F ')' '{print $1}')
			sudo -i -u $user DISPLAY=$display DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$uid/bus "$@" &
		fi
	done
}

function battery_daemon_cmd_run(){
	UpperLimit=100
	LowerLimit=0
	Once=yes
    source $1/conf
    BaseName=`basename $1`
    if [[ $UpperLimit -ge $BAT_CAP && $LowerLimit -le $BAT_CAP ]]
    then
    	if [ $Once == "yes" ]
    	then
    		if [ $[Flag_Battery_"$BaseName"] == 0 ]
			then
				eval Flag_Battery_"$BaseName"=1
				echo battery: $BAT_STAT $BAT_CAP, running exec
				source $1/exec
			fi
    	else
			echo battery: $BAT_STAT $BAT_CAP, running exec
    		source $1/exec
    	fi
    else
    	eval Flag_Battery_"$BaseName"=0
    fi
    unset BaseName
    unset Once
}

function battery_daemon_cmd_check(){
    for file in `ls $PathConfig/battery/* -d`
    do
    	[ -d $file ] && battery_daemon_cmd_run $file
    done
}

function battery_daemon_init_check(){
    for file in `ls $PathConfig/battery/* -d`
    do
    	[ -d $file ] && eval Flag_Battery_`basename $file`=0
    done
}

function battery_daemon_cmd_off(){
    #echo detect AC off
    [ -f $PathConfig/battery/bat ] && source $PathConfig/battery/bat
}

function battery_daemon_cmd_on(){
    #echo detect AC on
    [ -f $PathConfig/battery/ac ] && source $PathConfig/battery/ac
}

function battery_daemon_select_config(){
	if [ $Config_Mode == "One" ]
	then
		PathConfig="$PathEtc"/one
	else
		if [ $AC_STAT == "Online" ]
		then
			PathConfig="$PathEtc"/ac
		else
			PathConfig="$PathEtc"/bat
		fi
	fi
}

function timer_daemon_fifo(){
	while true
	do
		cat $PathRun/input_monitor_wake > /dev/null
		TimerFlag=`cat $PathRun/timer_flag`
		#echo $TimerFlag
		echo -n 'get user wake signal'
		if [ $TimerFlag -eq 1 ]
		then
			if [ -f $PathRun/backlight_saved ]
			then
				Backlight_Saved=`cat $PathRun/backlight_saved`
				[[ -z $Backlight_Saved ]] && Backlight_Saved=$Backlight_Idle
			else
				Backlight_Saved=$Backlight_Idle
			fi
			echo ", running exec"
			source "$PathConfig"/timer/wakeup
			TimerFlag=2
			echo $TimerFlag > $PathRun/timer_flag
		else
			echo
		fi
	done
}

function timer_daemon_input_monitor(){
    for line in `ls /dev/input/event*`
    do
        cat $line >>$PathRun/input_monitor &
    done
    for line in `ls /dev/input/mouse*`
    do
        cat $line >>$PathRun/input_monitor &
    done
    cat /dev/input/mice >>$PathRun/input_monitor &
}

function timer_daemon_cmd_run(){
    unset Time
    unset TimeLimit
    Once=yes
    source $1/conf
    BaseName=`basename $1`
	#echo $BaseName $[Flag_Timer_"$BaseName"]
    [[ -z $TimeLimit ]] && TimeLimit=$Time
    if [ $WaitTime -ge $TimeLimit ]
    then
    	if [ $Once == "yes" ]
    	then
    		if [ $[Flag_Timer_"$BaseName"] == 0 ]
    		then
    			eval Flag_Timer_"$BaseName"=1
    			source $1/exec
    			TimerFlag=1
    			[ -f $PathRun/timer_flag ] && echo $TimerFlag > $PathRun/timer_flag
    			echo Wait time: $WaitTime, running exec
    		fi
    	else
		echo Wait time: $WaitTime, running exec
    		source $1/exec
    		TimerFlag=1
    		[ -f $PathRun/timer_flag ] && echo $TimerFlag > $PathRun/timer_flag
    	fi
    else
    	eval Flag_Timer_"$BaseName"=0
    fi
    unset Time
    unset TimeLimit
    unset Mode
    unset BaseName
    unset Once
}

function timer_daemon_cmd_check(){
    for file in `ls $PathConfig/timer/* -d`
    do
    	[ -d $file ] && timer_daemon_cmd_run $file
    done
}

function timer_daemon_init_check(){
    for file in `ls $PathConfig/timer/* -d`
    do
    	[ -d $file ] && eval Flag_Timer_`basename $file`=0
    done
}

function timer_daemon_delete_file(){
	wcResult=0
	wcResult_old=0
	cat /dev/null > $PathRun/input_monitor
}

function lid_daemon_cmd_close(){
    echo detect lid close
    [ -f $PathConfig/lid/close ] && source $PathConfig/lid/close
}

function lid_daemon_cmd_open(){
    echo detect lid open
    [ -f $PathConfig/lid/open ] && source $PathConfig/lid/open
}

function backlight_daemon_get_avelight(){
	if [ $GpuName == "all" ]
	then
		SumLight=0
		Count=0
		for GpuPath in `ls /sys/class/backlight/* -d`
		do
			if [ -d $GpuPath ]
			then
				Tem=`getlight_relative`
				SumLight=$(bc -l <<< $SumLight+$Tem)
				Count=$((Count+1))
			fi
		done
		AveLight=$(bc -l <<< $SumLight/$Count)
		unset Count
		unset SumLight
	else
		GpuPath="/sys/class/backlight/$GpuName"
		AveLight=`getlight_relative`
	fi
}

function backlight_daemon_set_avelight(){
	if [ $GpuName == "all" ]
	then
		for GpuPath in `ls /sys/class/backlight/* -d`
		do
			if [ -d $GpuPath ]
			then
				setlight_relative $AveLight
			fi
		done
	else
		GpuPath="/sys/class/backlight/$GpuName"
		setlight_relative $AveLight
	fi
	backlight_daemon_get_avelight
	echo $AveLight > $PathRun/backlight_current
	PercentLight=`bc<<<"scale=0;$AveLight*100/1"`
	#[ $PercentLight -gt 100 ] && PercentLight=100
	#[ $PercentLight -lt 0 ] && PercentLight=0
	[ $Debug_Mode -eq 1 ] && echo $AveLight $PercentLight
	if [[ "$1" != "quiet" ]]
	then
			[ -e $PathConfig/backlight/exec ] && source $PathConfig/backlight/exec
	fi
}

function backlight_daemon_listen_fifo(){
	while [ $Listen_Fifo_Flag -eq 1 ]
	do
		if [ $Listen_Fifo_Flag -eq 1 ]
		then
			temLine=`cat $PathRun/backlight_fifo`
			echo backlight fifo updated 
		else
			exit 1
		fi
		if [[ $temLine == "up" ]]
		then
			INTERNAL_backlight_up
		elif [[ $temLine == "down" ]]
		then
			INTERNAL_backlight_down
		else
			AveLight=$temLine
			backlight_daemon_set_avelight
		fi
		unset temLine
	done
}

function daemon_term(){
	jobs -lr
	Listen_Fifo_Flag=0
	rm -rf $PathRun
	for pidline in `jobs -pr`
	do
		kill $pidline
	done
	unset pidline
	exit 2
}

function main_pre(){
#main
trap "daemon_term" SIGINT SIGTERM
[ -e $PathEtc/env.conf ] && source $PathEtc/env.conf
RefreshTime=${FreshTime:-"$RefreshTime"}
[[ -z $NODEPM_INIT ]] && echo "Warning: Please do not run nodepm-daemon directly but run nodepm-init instead"
if [ -e $PathRun ]
then
	if [ $Multirun_Mode -eq 1 ]
	then
		echo "Warning: Detect nodepm daemon running."
	elif [ $Multirun_Mode -eq 2 ]
	then
		echo "Warning: Detect nodepm daemon running."
		rm -rf $PathRun
		mkdir -p $PathRun
	else
		echo "Error: Detect nodepm daemon running, exiting. You can set Multirun_Mode to force start it"
		exit 1
	fi
else
	mkdir -p $PathRun
fi
# battery
if [ $BatteryDaemon == "on" ]
then
	$Bat_Function
	battery_daemon_select_config
	[ -e $PathConfig/battery/conf ] && source $PathConfig/battery/conf
	battery_daemon_init_check
	BAT_STAT_OLD=$BAT_STAT
	AC_STAT_OLD=$AC_STAT
	[ -e $PathRun/battery ] && rm -rf $PathRun/battery
	[ -e $PathRun/ac ] && rm -rf $PathRun/ac
	[ -e $PathRun/bat ] && rm -rf $PathRun/bat
	touch $PathRun/battery
	touch $PathRun/ac
	ln -s $PathRun/battery $PathRun/bat
else
	PathConfig="$PathEtc"/one
fi
# lid
if [ $LidDaemon == "on" ]
then
	[ -f $PathConfig/lid/conf ] && source $PathConfig/lid/conf
	[ -e $PathRun/lid ] && rm -rf $PathRun/lid
	ln -s $PathLid $PathRun/lid
	StateLid_old=0
	# 1 for close, 0 for open , 2 for unknown
fi
# backlight
if [ $BacklightDaemon == "on" ]
then
	Listen_Fifo_Flag=1
	Backlight_SaveFlag=0
	Gpu_Mode=0
	[ -e $PathConfig/backlight/conf ] && source $PathConfig/backlight/conf
	if [ $Gpu_Mode == "all" ]
	then
		GpuName=all
	else
		GpuName=$Gpu_Backlight
	fi
	[ -e $PathRun/backlight_fifo ] && rm -rf $PathRun/backlight_fifo
	mkfifo $PathRun/backlight_fifo
	chmod 666 $PathRun/backlight_fifo
	[ -e $PathRun/backlight_current ] && rm -rf $PathRun/backlight_current
	[ -e $PathRun/backlight_saved ] && rm -rf $PathRun/backlight_saved
	touch $PathRun/backlight_current
	chmod 644 $PathRun/backlight_current
	[ $Wake_Fifo == "on" ] && {
		touch $PathRun/backlight_saved
		chmod 644 $PathRun/backlight_saved
	}
	backlight_daemon_get_avelight
	backlight_daemon_set_avelight quiet
	backlight_daemon_listen_fifo &
fi
# timer
if [ $TimerDaemon == "on" ]
then
	[ -e $PathConfig/timer/conf ] && source $PathConfig/timer/conf
	[ -e $PathRun/input_monitor_mode ] && rm -rf $PathRun/input_monitor_mode
	[ -e $PathRun/input_monitor ] && rm -rf $PathRun/input_monitor
	[ -e $PathRun/input_monitor_wait_time ] && rm -rf $PathRun/input_monitor_wait_time
	echo 1 > $PathRun/input_monitor_mode
	touch $PathRun/input_monitor_wait_time
	touch $PathRun/input_monitor
	chmod 644 $PathRun/input_monitor
	chmod 666 $PathRun/input_monitor_mode
	chmod 644 $PathRun/input_monitor_wait_time
	wcResult=0
	wcResult_old=0
	WaitTime=0
	TimerFlag=0
	timer_daemon_init_check
	if [ $Wake_Fifo == "on" ]
	then
		[ -e $PathRun/input_monitor_wake ] && rm -rf $PathRun/input_monitor_wake
		[ -e $PathRun/input_monitor_wake ] && rm -rf $PathRun/timer_flag
		touch $PathRun/timer_flag
		mkfifo $PathRun/input_monitor_wake
		chmod 666 $PathRun/input_monitor_wake
		chmod 644 $PathRun/timer_flag
		timer_daemon_fifo &
	fi
	timer_daemon_input_monitor
fi
# init bashrc
[ -e $PathEtc/'init.exec' ] && source $PathEtc/'init.exec'
}

function main_loop(){
# loop
while true
do
# battery
	if [ $BatteryDaemon == "on" ]
	then
		$Bat_Function
		echo $BAT_STAT $BAT_CAP > $PathRun/battery
		echo $AC_STAT > $PathRun/ac
		[ $Config_Mode == "One" ] || battery_daemon_select_config
		if [[ $AC_STAT == "Online" && $AC_STAT_OLD == "Offline" ]]
		then
			echo "AC online"
			battery_daemon_cmd_on
		elif [[ $AC_STAT == "Offline" && $AC_STAT_OLD == "Online" ]]
		then
			echo "AC offline"
			battery_daemon_cmd_off
		fi
		BAT_STAT_OLD=$BAT_STAT
		AC_STAT_OLD=$AC_STAT
		export Battery_Capacity=$BAT_CAP
		battery_daemon_cmd_check
		[ $Debug_Mode -eq 1 ] && echo power status: ac $AC_STAT battery $BAT_CAP
	fi
# timer
	if [ $TimerDaemon == "on" ]
	then
    	wcResult=`wc -c $PathRun/input_monitor`
    	wcResult=${wcResult%' '*}
    	if [ `cat $PathRun/input_monitor_mode` -eq 1 ]
    	then
    		[ -f $PathRun/timer_flag ] && {
    			TimerFlag_Tmp=`cat $PathRun/timer_flag` 
    			TimerFlag=${TimerFlag_Tmp:-$TimerFlag}
    		}
    		if [ $TimerFlag -eq 2 ]
		       	then
		       		TimerFlag=0
		       		WaitTime=0
		    else
    	    	if [ $wcResult_old -eq $wcResult ]
    	    	then
		      		WaitTime=$((WaitTime+RefreshTime))
		    	else
		       		WaitTime=0
		       		if [ $TimerFlag -eq 1 ]
		       		then
		       			source "$PathConfig"/timer/wakeup
		       			TimerFlag=0
		       		fi
				fi
			fi
			timer_daemon_cmd_check
			wcResult_old=$wcResult
			timer_daemon_delete_file
		else
			WaitTime=0
			timer_daemon_delete_file
		fi
		[ $WaitTime -eq 0 ] && timer_daemon_init_check
		echo $WaitTime > $PathRun/input_monitor_wait_time
		[ $Debug_Mode -eq 1 ] && echo waittime: $WaitTime
	fi
# lid
	if [ $LidDaemon == "on" ]
	then
		if [ -e $PathLid ]
    	then
    	    cat $PathLid | grep open > /dev/null
    	    StateLid=$?
    	# 1 for close, 0 for open , 2 for unknown
    	else
    	    StateLid=2
    	    echo "cannot detect state f lid" >&2
    	fi
    	[[ $StateLid -eq 1 && $StateLid_old -eq 0 ]] && lid_daemon_cmd_close
    	[[ $StateLid -eq 0 && $StateLid_old -eq 1 ]] && lid_daemon_cmd_open
    	StateLid_old=$StateLid
    fi
# backlight
	backlight_daemon_get_avelight
	echo $AveLight > $PathRun/backlight_current
	[ $Debug_Mode -eq 1 ] && echo backlight: $AveLight
#
	[ $Debug_Mode -eq 1 ] && echo Config in use: $PathConfig
	[ -f $PathRun/timer_flag ] && echo $TimerFlag > $PathRun/timer_flag
# loop bashrc
	[ -e $PathEtc/'loop.exec' ] && source $PathEtc/'loop.exec'
#
	sleep $RefreshTime
done
}

function init_run(){
if (echo $Inhibit_List |grep -iw "default">/dev/null)
then
	Inhibit_List="handle-power-key:handle-suspend-key:handle-hibernate-key:idle"
	if [ $LidDaemon == "on" ]
	then
		Inhibit_List="$Inhibit_List":handle-lid-switch
	fi
elif (echo $Inhibit_List |grep -iw "all">/dev/null)
then
	Inhibit_List="handle-power-key:handle-suspend-key:handle-hibernate-key:handle-lid-switch:shutdown:sleep:idle"
fi
echo
echo inhibit:
Inhibit_Tmp=$Inhibit_List
Inhibit_Tmp_Flag=0
while [ $Inhibit_Tmp_Flag -eq 0 ]
do
	Inhibit_Tmp_Front=${Inhibit_Tmp%%:*}
	Inhibit_Tmp=${Inhibit_Tmp#*:}
	if [ $Inhibit_Tmp_Front == $Inhibit_Tmp ]
	then
		Inhibit_Tmp_Flag=1
	fi
	echo "    "$Inhibit_Tmp_Front
done
unset Inhibit_Tmp
unset Inhibit_Tmp_Flag
unset Inhibit_Tmp_Front
echo
echo daemon enabled:
[ $BatteryDaemon == "on" ] && echo "    "battery
[ $LidDaemon == "on" ] && echo "    "lid
[ $BacklightDaemon == "on" ] && echo "    "backlight
[ $TimerDaemon == "on" ] && echo "    "timer
echo
export NODEPM_INIT=1
export Debug_Mode=$Debug_Mode
systemd-inhibit --what=$Inhibit_List --who=nodepm-daemon --why="none-dekstop power manager" $ProgramName daemon
unset NODEPM_INIT
unset Debug_Mode
}

function check_root(){
	[ `whoami` == "root" ] || {
		echo "Error:   Need to run as root"
		exit 1
	}
}

function backlight_switcher(){
Backlight_Move=0
if [ -e "$PathRun/backlight_fifo" ]
then
	tem1=$1
	Para1=${tem1:-"None"}
	tem2=$2
	Para2=${tem2:-"None"}
	unset tem1
	unset tem2
	if [ "$Para1" == "up" ]
	then
		echo "up" > $PathRun/backlight_fifo
		Backlight_Move=up
	elif [ "$Para1" == "down" ]
	then
		echo "down" > $PathRun/backlight_fifo
		Backlight_Move=down
	elif [ "$Para1" == "set" ]
	then
		if [ "$Para2" == "None" ]
		then
			echohelp
		else
			echo $Para2 > $PathRun/backlight_fifo
			Backlight_Move=set
		fi
	elif [ "$Para1" == "get" ]
	then
		echo "Backlight brightness:"
		[ -e $PathRun/backlight_current ] && cat $PathRun/backlight_current
	else
		echohelp
	fi
	#AveLight=`cat $PathRun/backlight_current`
	#Light=`echo "100*$AveLight/1" | bc`
	#[ $Light -gt 100 ] && Light=100
	#[ $Light -lt 0 ] && Light=0
	#Light="$Light"'%'
	#notify-send "Brightness $Backlight_Move: $Light"
	unset Para1
	unset Para2
else
	echo "Cannot find npdepm daemon !"
fi
}

function timer_switcher(){
[ -e "$PathRun/input_monitor_mode" ] || {
	echo "Cannot find nodepm daemon"
	exit 0
}
tmp=$1
tem=${tmp:-0}
if [ $tem == "on" ]
then
	echo 1 > $PathRun/input_monitor_mode
elif [ $tem == "off" ]
then
	echo 0 > $PathRun/input_monitor_mode
elif [ $tem == "switch" ]
then
	Flag=`cat $PathRun/input_monitor_mode`
	Flag=$((1-$Flag))
	echo $Flag > $PathRun/input_monitor_mode
	unset Flag
elif [ $tem == "status" ]
then
	Monitor_Mode=on
	[ `cat $PathRun/input_monitor_mode` -eq 0 ] && Monitor_Mode=off
	echo "Status:	$Monitor_Mode"
else
	echohelp
fi
unset tmp
unset tem
unset Monitor_Mode
}

function battery_show(){

[ -e "$PathRun"/ac ] && {
echo Ac:
cat "$PathRun"/ac
}
echo
[ -e "$PathRun"/bat ] && {
echo Battery:
cat "$PathRun"/bat
}
}

function echohelp(){
	echo "NOne-Desktop-Environment Power Manager (NODEPM) "
	echo "Version: $Version"
	echo
	echo "Usage: $0 "'ARGV'
	echo 
	echo "ARGV:"
	echo "need root permission:"
	echo
	echo " init					init the nodepm daemon"
	echo ' daemon					mainly for testing and debug, please run '"init"' argument instead if you use systemd as init'
	echo
	echo "need daemon running, do not need root permission:"
	echo
	echo " backlight				change or show backlight of screen, need daemon running"
	echo "   backlight up				turn up backlight"
	echo "   backlight down			turn up backlight"
	echo "   backlight set VALUE			set backlight to given VALUE which should be between 0 and 1"
	echo "   backlight get			get current backlight"
	echo " timer					change or show mode of input timing monitor mode"
	echo "   timer on				set timing mode on"
	echo "   timer off				set timing mode off"
	echo "   timer switch				switch timing mode between on and off"
	echo "   timer status				show current mode of input timing monitor "
	echo " battery				show status of battery and ac power"
	echo 
	echo "bash variables:"
cat << EOF
all these bash variables can be modified in $PathEtc/env.conf. adding them before CMDLINE is also possible but not recommended:
 
 Bat_Function				the function to get battery and ac power status, now supports 'sys' and 'acpi', 'sys' as default
 RefreshTime				refresh time of daemon loop, 2 as default
 Config_Mode				'double' to switch config between battery mode and ac mode, 'one' for a single config. configs can be found under $PathEtc. 'double' as default
 Gpu_Backlight				'all' to take over all the gpu backlight files, otherwise any directory under /sys/class/backlight can be use as value here. 'all' as default
 Backlight_Unit				backlight unit when turning up and down which should be between 0 and 1, 0.075 as default, recommended between 0.05 and 0.2
 Backlight_Idle				default backlight to be set when idle ( Notice: not screen off! ) , also the expected lower limit of idling backlight brightness. it should be between 0 and 1, 0.25 as default
 Inhibit_List				what to inhibit by 'systemd-inhibit', 'default' to let nodepm set it smartly, 'all' to inhibit all, otherwise please read 'man systemd-inhibit'. 'default' as default
 Debug_Mode				debug mode, 1 to turn on, 0 for off as default
 Multirun_Mode				0 to ban run more than one nodepm daemon at the same time, 1 to igore current nodepm daemon and 2 to remove and reset current run file. 0 as default
 BatteryDaemon				'on' to run battery daemon, 'off' to skip it. when 'on', $PathEtc/*/battery/conf will also be read. 'on' as default. Notice 'on' is needed for Config_Mode 'double'
 LidDaemon				'on' to run lid daemon, 'off' to skip it. when 'on', $PathEtc/*/lid/conf will also be read. 'on' as default 
 TimerDaemon				'on' to run timing daemon, 'off' to skip it. when 'on', $PathEtc/*/timer/conf will also be read. 'on' as default 
 BacklightDaemon			'on' to run backlight daemon, 'off' to skip it. when 'on', $PathEtc/*/backlgiht/conf will also be read. 'on' as default
 Wake_Fifo				'on' to start a daemon to hear a specific fifo to wake from idle, 'off' to skip it, 'on' as default
 
variables below , please just read them in $PathEtc but do not change:
 Ac_Status				status of ac power
 Battery_Status				status of battery power
 Battery_Capacity			capacity of battery
 Battery_Time				time prediction of battery power
EOF
echo
echo "config files:"
echo "all files here are bash scripts"
echo
cat << EOF
 $PathEtc/init.exec			bash script to source and run when daemon inits
 $PathEtc/loop.exec			bash script to source and run in every daemon loop
 $PathEtc/env.conf			universal config for nodepm, sourced before daemon inits
 
 $PathEtc/bat/*			config in use under Config_Mode 'double' and ac power off
 $PathEtc/ac/*			config in use under Config_Mode 'double' and ac power on
 $PathEtc/one/*			config in use under Config_Mode 'one'
   backlight/
    conf				config soruced when BacklightDaemon='on'
    exec				bash script to source and run when backlight is changed
   battery/
    conf				config soruced when BatteryDaemon='on'
    ac					bash script to source and run when switching to ac power. only the one under $PathEtc/ac is valid.
    bat					bash script to source and run when switching to battery power. only the one under $PathEtc/bat is valid.
    */					directories under battery/ are those scipts to run at specific power status
     exec				bash script to source and run under certain condition
     conf				config for when to source and run script
      VALUES:
       Once				Once='yes' (default) to run only once when condition once trigers, Once='no' to run always when condition true
       UpperLimit			set the upper limit percent of battery capacity to run the script, 100 as default
       LowerLimit			set the lower limit percent of battery capacity to run the script, 0 as default
   lid/
    conf				config soruced when LidDaemon='on'
    open				bash script to source and run when detect lid open
    close				bash script to source and run when detect lid close
   timer/
    conf				config soruced when TimerDaemon='on'
    wakeup				bash script to source and run when detect new input after waiting for some time
    */					directories under timer/ are those scipts to run at specific power status
     exec				bash script to source and run under certain condition
     conf				config for when to source and run script
      VALUES:
       Once				Once='yes' (default) to run only once when condition once trigers, Once='no' to run always when condition true
       TimeLimit			set the lower time limit of idle time waited to run the script
EOF
echo
echo "internal functions:"
echo "can be used in bash scripts in $PathEtc"
echo
cat << EOF
 INTERNAL_user_run CMDLINE		run CMDLINE as users rather than root
 INTERNAL_backlight_up			turn up backlight
 INTERNAL_backlight_down		turn down backlight
 INTERNAL_backlight_off			save current backlight and turn off baclight
 INTERNAL_backlight_idle [BRIGHTNESS]	save current backlight and turn it down to [BRIGHTNESS], if [BRIGHTNESS] is absent then use value of Backlight_Idle. Notice: [BRIGHTNESS] should be no less than Backlight_Idle
 INTERNAL_backlight_wake		wake up screen from backlight off or idle
 
Other internal functions are not for user to run
EOF
echo
echo "temporary files in $PathRun:"
echo "whetehr these files are availible deciding on configuration"
echo
cat <<EOF
these files can be both read and edited:
 input_monitor_mode			mode of timer daemon, can be 0 r 1

these files can only be read but please do not edit:
 ac					status of ac power 
 bat					status of battery 
 battery				same as "$PathRun/"bat
 lid					status of lid
 backlight_current			backlight of current screen
 input_monitor_wait_time 		time that timer daemon has waited
 can be edited

these files can be written into or edit but cannot be read (fifo files) :
 input_monitor_wake			write this file to wake timer daemon for user 
 backlight_fifo				write this file to control backlight

others are just temporary files for program itself, please not read or edit them
EOF
}

ARGV_ALL=$*
ARGV_OTHER=${ARGV_ALL#*' '}
case $1 in
	init)
		check_root
		init_run
	;;
	daemon)
		check_root
		main_pre
		main_loop
	;;
	backlight)
		backlight_switcher $ARGV_OTHER
	;;
	timer)
		timer_switcher $ARGV_OTHER
	;;
	battery)
		battery_show
	;;
	*)
		echohelp
	;;
esac
unset ARGV_ALL
unset ARGV_OTHER
